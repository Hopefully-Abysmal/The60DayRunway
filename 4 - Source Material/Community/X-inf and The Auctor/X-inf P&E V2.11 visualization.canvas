{
	"nodes":[
		{"id":"174cf6e52c705762","type":"text","text":"\n|Equation #|Chunk / Variable|Explanation (Plain Text)|Functional Effect on System|\n|---|---|---|---|\n|(2)|CapPast|Historical authority based on accumulated actions.|Feeds directly into CapPotential; foundational to trust in entity capability.|\n|(3)|Cap_after_Feedback|Final Cap after feedback from completed tasks.|Updates CapPast and MPot for future evaluations.|\n|(4)|P_oversteer(A)|Penalty for oversteering system paths.|Reduces CapPast exponentially if an entity manipulates system complexity.|\n|(5)|Penalty: Return Abuse|Penalizes frequent task returns (gaming the system).|Discourages avoidance of responsibility after task assignment.|\n|(6)|Bonus: Compensation|Rewards valid returns that contribute positively.|Allows system fairness if tasks are returned for valid reasons.|\n|(7-9)|CapPotential|Calculates future responsibility an entity can bear.|Governs CapTotal limit and eligibility for task acceptance/delegation.|\n|(10)|CapProtection|Protective adjustment for weaker or overloaded agents.|Prevents overwhelming low-capability entities.|\n|(11)|MPot (Capability Profile)|Memory of domain-specific capabilities.|Evolves based on feedback; updates CapPotential accordingly.|\n|(12)|CapReal|Real-time responsibility currently held by the entity.|Ensures entity isnâ€™t overloaded beyond CapPotential.|\n|(13)|Petitions (P)|Task requests weighted by entity support and feedback.|Determines prioritization of new system tasks.|\n|(14)|Î”CapFeedback|Total feedback effect from other entities.|Directly updates CapPast; enables feedback loop control.|\n|(15)|Feedback Weight (wE)|Feedback weighting favors weaker entities.|Prevents dominance by powerful actors; amplifies feedback from low-cap agents.|\n|(16)|Penalty: Delegation Failure|Penalizes failed delegated tasks.|Discourages over-delegation and irresponsible task assignment.|\n|(17)|Penalty: Complexity|Penalizes high complexity relative to system norms.|Limits creation of overcomplicated task chains.|\n|(18)|Penalty: Delegation Depth|Penalizes deeply nested delegation chains.|Prevents abuse of layered task structures to obfuscate accountability.|\n|(19-21)|System Limits|Enforces system-wide responsibility ceilings.|Maintains system stability and fair load distribution.|\n|(22)|Cap_UdU|Theoretical infinite authority of the UdU role.|Acts as a failsafe for systemic breakdown scenarios; never actively participates except in crises.|\n","x":-700,"y":-126,"width":1020,"height":986},
		{"id":"ac18ef3a116e173f","x":-494,"y":920,"width":609,"height":621,"type":"text","text":"### ðŸ§© **Chronological Flow of the Equations**\n\n1. **Initialization**\n    \n    - Entity enters system with CapBase and CapBGE.\n        \n    - MPot is self-declared for task suitability.\n        \n2. **Task Assignment**\n    \n    - CapPotential checks if the entity can take on the task.\n        \n    - If delegated, Delegation Validity (Eq. 19-21) is enforced.\n        \n3. **Task Execution**\n    \n    - CapReal tracks current task burden (Eq. 12).\n        \n    - Upon completion, feedback is gathered (Eq. 14).\n        \n4. **Feedback Loop**\n    \n    - Î”CapFeedback updates CapPast (Eq. 2).\n        \n    - MPot is recalculated based on success/failure (Eq. 11).\n        \n    - CapPotential recalculated (Eq. 9).\n        \n5. **Corrections & Penalties**\n    \n    - Penalties applied for oversteering, return abuse, complexity, and delegation depth (Eqs. 4-6, 16-18).\n        \n6. **Cycle Continues**\n    \n    - Entityâ€™s CapPotential and CapReal determine ongoing task eligibility.\n        \n    - UdU intervenes if system destabilizes (Eq. 22)."}
	],
	"edges":[]
}